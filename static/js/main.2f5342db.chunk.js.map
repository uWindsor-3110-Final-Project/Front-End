{"version":3,"sources":["components/fullstackdads.png","logo.svg","components/navbar.js","components/homePage.js","components/subPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","fullstackdads","to","React","Component","HomePage","placeholder","type","value","SubPage","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,2C,4ECA3CD,EAAOC,QAAU,IAA0B,kC,8OCqB5BC,E,iLAdb,OACC,6BACI,wBAAIC,UAAU,aACT,wBAAIA,UAAU,eAAc,yBAAKA,UAAU,OAAOC,IAAKC,OACvD,wBAAIF,UAAU,eAAc,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,KAA9B,SAC5B,wBAAIH,UAAU,eAAc,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,aAA9B,gBAC5B,wBAAIH,UAAU,eAAc,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,SAA9B,kBAC5B,wBAAIH,UAAU,eAAc,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,SAA9B,gB,GATnBC,IAAMC,W,YCqBZC,MAjBf,WACE,OACE,6BACE,yBAAKN,UAAU,QACb,wBAAIA,UAAU,eAAd,WACA,2BAAOA,UAAU,aAAaO,YAAY,cAAoB,6BAC9D,2BAAOP,UAAU,aAAaO,YAAY,UAAgB,6BAC1D,2BAAOP,UAAU,aAAaO,YAAY,aAAmB,6BAC7D,2BAAOP,UAAU,aAAaO,YAAY,oBAA0B,6BACpE,2BAAOP,UAAU,cAAcQ,KAAK,SAASC,MAAM,aAAmB,6BACtE,0BAAMT,UAAU,cAAhB,4BAAsD,kBAAC,IAAD,CAAMG,GAAG,WAAT,aCX/CO,MANf,WACE,OACC,yCCkBYC,MAdf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,IAAIC,OAAK,EAACC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,KAAK,WAAWE,UAAWJ,QCHxBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2f5342db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fullstackdads.5e32e90d.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport '../style/navbar.css';\nimport {Link, BrowserRouter as Router} from 'react-router-dom';\nimport fullstackdads from './fullstackdads.png';\n\nclass NavBar extends React.Component{\nrender(){\n  return (\n   <nav>   \n       <ul className='nav-links'>\n            <li className='nav-link-li'><img className='logo' src={fullstackdads}></img></li>\n            <li className='nav-link-li'><Link className='nav-link' to='/'>Home</Link></li>\n            <li className='nav-link-li'><Link className='nav-link' to='/scheduel'>My Scheduel</Link></li>\n            <li className='nav-link-li'><Link className='nav-link' to='/rate'>Rate My Class</Link></li>\n            <li className='nav-link-li'><Link className='nav-link' to='/rate'>Login</Link></li>\n       </ul>\n   </nav>\n  );\n}\n}\n\nexport default NavBar;\n","import React from 'react';\nimport '../style/homePage.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Link} from 'react-router-dom';\n// import '../../node_modules/font-awesome/css/font-awesome.min.css';\n// import 'font-awesome/css/font-awesome.min.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faUser } from '@fortawesome/free-solid-svg-icons';\n\nfunction HomePage() {\n  return (\n    <div>\n      <div className='form'>\n        <h1 className='form-header'>Sign Up</h1>\n        <input className='form-input' placeholder='Full Name'></input><br></br>\n        <input className='form-input' placeholder='Email'></input><br></br>\n        <input className='form-input' placeholder='Password'></input><br></br>\n        <input className='form-input' placeholder='Renter Password'></input><br></br>\n        <input className='form-button' type='button' value='Register'></input><br></br>\n        <span className='form-input'>Already have an account? <Link to='/signup'>Login</Link></span>\n        {/* <button>Register</button> */}\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\n\nfunction SubPage() {\n  return (\n   <h1>Sub Page</h1>\n  );\n}\n\nexport default SubPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport NavBar from './components/navbar';\nimport HomePage from './components/homePage';\nimport SubPage from './components/subPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar></NavBar>\n        <Switch>\n          <Route path='/' exact component={HomePage}/>\n          <Route path='/subpage' component={SubPage}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}